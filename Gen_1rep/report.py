from Gen_1rep.obzeratel import *

# Поиск файлов, совпадающих с названием папки
root_directory = r'C:\Users\epyur\PycharmProjects\PythonProject\Gen_6\out'  # Укажите путь к корневой папке
# путь к отчетному файлу
current_directory = os.getcwd()
rep_file = os.path.join(current_directory, 'rep', 'report.xlsx')

text_to_remove = '-//-'

# перечень колонок, которые мы хотим сразу удалить из будущего датафрейма
column_to_remove = ['Цель проведения испытаний', 'Форма подтверждения соответствия (опционально)',
                                            'Приоритетность заявки', 'Краткое описание (в протокол)', 'Тип материала (для отдельных видов испытаний)',
                                            'Ссылка на файл (к заявке)', 'Наименование бюджета (для СБЕ кроме ПМиПИР)', 'Статья расходов (для СБЕ кроме ПМиПИР)',
                                            'ФИО лица согласующего расходы', 'e-mail лица согласующего расходы', 'Групповая принадлежность материала',
                                            'Цвет', 'Расширенное описание материала', '1. Определение группы горючести', '1.52 Фото образцов до испытания',
                                            '1.53 Фото образцов после испытаний', '1.54 График температуры', '2. Определение группы воспламеняемости',
                                            'Количество образцов переданных на испытания', 'Идентификатор заявки', 'Электронная почта заказчика',
                                            'Служебный код материала', 'Целевой показатель (другое)', 'Целевой показатель (для НИОКР)', '1.4 Идентификаторы записей испытаний',
                                            '2.4 Идентификаторы записей испытаний', '2.13 Количество образцов подвергнутых испытанию',
                                            '1.8.1 Количество образцов предоставленных на испытания']

# перечень колонок, где могут быть проблемы с отображением дробей
list_mes_transformation = ['Толщина, мм', '1.2 Атмосферное давление, кПа', '2.2 Атмосферное давление']

# перечень колонок, где могут быть повторы значений
duplicat_list = ['Наименование лаборатории', '1.5 Дата формирования протокола', '1.6 ФИО испытателя',
                      '1.7 Дата предоставления образцов', '1.8 Дата проведения испытаний', '1.49 Основание под образец',
                      '1.51 Дополнительная информация', '2.5 Наименование лаборатории', '2.6 Дата поступления образцов', '2.8 Тип основания под образец',
                      '2.12 Дополнительная информация', '2.7 Дата проведения эксперимента', '2.5 ФИО испытателя']

# колонки, где дата представлена в формате гггг - мм - дд, преобразуется в формат дд.мм.ггг
time_col = ['1.7 Дата предоставления образцов', '1.8 Дата проведения испытаний', '2.6 Дата поступления образцов',
                           '2.7 Дата проведения эксперимента']

# формируем список датафреймов из разных файлов
dataframes = DfList(root_directory, text_to_remove, column_to_remove, list_mes_transformation, duplicat_list, time_col)

# создаем объединенный датафрейм и записываем его в файл эксель
merged_df = MergDF(dataframes, 'Служебный идентификатор', rep_file, 'Результаты_испытаний')

# ColorMark(rep_file, 'Результаты_испытаний', merged_df, 'Не соответствует', 'Соответствует')

# condition = ((merged_df['1.48 Общее соответствие'] == 'Не соответствует') & (merged_df['Наименование лаборатории'] == "ЛПИ")) | (
#                 (merged_df['2.16 Соответствие декларируемой группе воспламеняемости'] == 'Не соответствует') & (merged_df['2.5 Наименование лаборатории'] == "ЛПИ"))
# df_cond = ConditionFrame(merged_df, condition, rep_file, 'Несоответствие по ЛПИ')

selected_columns = ['Служебный идентификатор', 'Дата поступления заявки', 'Наименование материала', 'Толщина, мм',
                    'Группа воспламеняемости (декларируемая)', '2.7 Дата проведения эксперимента',
                    '2.15 Установленная группа воспламеняемости', '2.16 Соответствие декларируемой группе воспламеняемости']

df_sel = SelectAndFiltre(merged_df, selected_columns, '2.16 Соответствие декларируемой группе воспламеняемости',
                         'Не соответствует', rep_file, 'Воспламеняемость_соответствие')

selected_columns2 = ['Служебный идентификатор', 'Наименование материала', 'ЕКН',
                     '2.5 Наименование лаборатории', '2.9 Плотность теплового потока для эксперимента',
                     '2.11 Время воспламенения, с']

df_sel2 = SelectAndFiltre(merged_df, selected_columns2, 'ЕКН', 500464, rep_file, 'Саларьево')
df_sel2_new = df_sel2.rename(columns ={'Служебный идентификатор': '№ Заявки', 'Наименование материала': 'Материал',
                                   '2.5 Наименование лаборатории': 'Лаборатория', '2.9 Плотность теплового потока для эксперимента': 'Плотность теплового потока',
                                   '2.11 Время воспламенения, с': 'Время воспламенения'})

Picator(df_sel2_new, 'Плотность теплового потока', 'Время воспламенения', 'Плотность теплового потока, кВт/м^2',
        'Время воспламенения, с', 'Лаборатория', 'Зависимость времени воспламенения от плотности теплового потока для ЕКН 500464', rep_file,
        'Саларьево')