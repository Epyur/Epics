from func import *

# Поиск файлов, совпадающих с названием папки
root_directory = r'C:\Users\epyur\PycharmProjects\PythonProject\Gen_6\out'  # Укажите путь к корневой папке
# путь к отчетному файлу
current_directory = os.getcwd()
rep_file = os.path.join(current_directory, 'rep', 'report.xlsx')

text_to_remove = '-//-'

# перечень колонок, которые мы хотим сразу удалить из будущего датафрейма
column_to_remove = ['Цель проведения испытаний', 'Форма подтверждения соответствия (опционально)',
                                            'Приоритетность заявки', 'Краткое описание (в протокол)', 'Тип материала (для отдельных видов испытаний)',
                                            'Ссылка на файл (к заявке)', 'Наименование бюджета (для СБЕ кроме ПМиПИР)', 'Статья расходов (для СБЕ кроме ПМиПИР)',
                                            'ФИО лица согласующего расходы', 'e-mail лица согласующего расходы', 'Групповая принадлежность материала',
                                            'Цвет', 'Расширенное описание материала', '1. Определение группы горючести', '1.52 Фото образцов до испытания',
                                            '1.53 Фото образцов после испытаний', '1.54 График температуры', '2. Определение группы воспламеняемости',
                                            'Количество образцов переданных на испытания', 'Идентификатор заявки', 'Электронная почта заказчика',
                                            'Служебный код материала', 'Целевой показатель (другое)', 'Целевой показатель (для НИОКР)', '1.4 Идентификаторы записей испытаний',
                                            '2.4 Идентификаторы записей испытаний', '2.13 Количество образцов подвергнутых испытанию',
                                            '1.8.1 Количество образцов предоставленных на испытания']

# перечень колонок, где могут быть проблемы с отображением дробей
list_mes_transformation = ['Толщина, мм', '1.2 Атмосферное давление, кПа', '2.2 Атмосферное давление']

# перечень колонок, где могут быть повторы значений
duplicat_list = ['Наименование лаборатории', '1.5 Дата формирования протокола', '1.6 ФИО испытателя',
                      '1.7 Дата предоставления образцов', '1.8 Дата проведения испытаний', '1.49 Основание под образец',
                      '1.51 Дополнительная информация', '2.5 Наименование лаборатории', '2.6 Дата поступления образцов', '2.8 Тип основания под образец',
                      '2.12 Дополнительная информация', '2.7 Дата проведения эксперимента', '2.5 ФИО испытателя']

# колонки, где дата представлена в формате гггг - мм - дд, преобразуется в формат дд.мм.ггг
time_col = ['1.7 Дата предоставления образцов', '1.8 Дата проведения испытаний', '2.6 Дата поступления образцов',
                           '2.7 Дата проведения эксперимента']

# формируем список датафреймов из разных файлов
dataframes = DfList(root_directory, text_to_remove, column_to_remove, list_mes_transformation, duplicat_list, time_col)


# создаем объединенный датафрейм и записываем его в файл эксель
merged_df = MergDF(dataframes, 'Служебный идентификатор', rep_file, 'Результаты_испытаний')

# выделяем красным соответствия/не соответствия. функцию применять только на файле с одной вкладкой,
# в противном случае вкладки, к которым не применяется функция, будут удалены.
color_cell = ['Не соответствует', 'Соответствует']
ColorMark(rep_file, 'Результаты_испытаний', 'Не соответствует', 'Соответствует')

# сортировка №1 сведения о заявках на горючесть
colums_1 = ['Служебный идентификатор', 'Дата поступления заявки', '1.5 Дата формирования протокола', 'ЕКН', 'Наименование материала',
            'Толщина, мм', 'Группа горючести (декларируемая)', '1.9.0 Температура в печи на начало эксперимента',
            '1.13. Средняя температура дымовых газов', '1.16 Время достижения максимальной температуры, с', '1.15 Общее соответствие с декларируемым показателем по температуре дымовых газов',
            '1.24 Средняя длина повреждений, %', '1.26 Общее соответствие декларируемому показателю (по длине повреждений)',
            '1.32 Средняя потеря массы', '1.34 Соответствие декларируемой группе горючести по потере массы',
            '1.38 Среднее время самостоятельного горения, с', '1.40 Соответствие декларируемой группе горючести, по самостоятельному горению',
            '1.44 Падение горящих капель, общая оценка', '1.46 Соответствие декларируемой группе горючести по падению капель, общая оценка',
            '1.47 Общая оценка группы горючести', '1.48 Общее соответствие']
colums_1_rename = {'Служебный идентификатор': '№ Заявки', '1.5 Дата формирования протокола': 'Дата формирования протокола испытаний',
                   '1.9.0 Температура в печи на начало эксперимента': 'Начальная температура в печи',
                   '1.13. Средняя температура дымовых газов': 'Средняя температура дымовых газов',
                   '1.16 Время достижения максимальной температуры, с': 'Время достижения максимальной температуры, с',
                   '1.15 Общее соответствие с декларируемым показателем по температуре дымовых газов': 'Соответствие (по температуре дымовых газов)',
                   '1.24 Средняя длина повреждений, %': 'Средняя длина повреждений, %',
                   '1.26 Общее соответствие декларируемому показателю (по длине повреждений)': 'Соответствие (по длине повреждений)',
                   '1.32 Средняя потеря массы': 'Средняя потеря массы, %', '1.34 Соответствие декларируемой группе горючести по потере массы': 'Соответствие (по потере массы)',
                   '1.38 Среднее время самостоятельного горения, с': 'Среднее время самостоятельного горения, с',
                   '1.40 Соответствие декларируемой группе горючести, по самостоятельному горению': 'Соответствие (по времени самостоятельного горения)',
                   '1.44 Падение горящих капель, общая оценка': 'Падение горящих капель',
                   '1.46 Соответствие декларируемой группе горючести по падению капель, общая оценка': 'Соответствие (по падению капель)',
                   '1.47 Общая оценка группы горючести': 'Установленная группа горючести', '1.48 Общее соответствие': 'Общее соответствие'}
df_comb = SelectAndFilter(merged_df, colums_1, column_name='1.47 Общая оценка группы горючести', filters=['Г4', 'Г3', 'Г2', 'Г1'],
                          dict_to_rename=colums_1_rename, file_nam=rep_file, sheet_nam='Горючесть')

# Сортировка №2, сведения о заявках на воспламеняемость
colums_2 = ['Служебный идентификатор', 'Дата поступления заявки', '2.7 Дата проведения эксперимента', 'ЕКН', 'Наименование материала',
            'Толщина, мм', 'Группа воспламеняемости (декларируемая)', '2.14 Критическая плотность теплового потока', '2.15 Установленная группа воспламеняемости',
            '2.16 Соответствие декларируемой группе воспламеняемости']
colums_2_rename = {'Служебный идентификатор': '№ Заявки', '2.7 Дата проведения эксперимента': 'Дата формирования протокола испытаний',
                   '2.14 Критическая плотность теплового потока': 'КПТП',
                   '2.15 Установленная группа воспламеняемости': 'Установленная группа воспламеняемости',
                   '2.16 Соответствие декларируемой группе воспламеняемости': 'Соответствие'}
df_flam = SelectAndFilter(merged_df, colums_2, column_name='2.15 Установленная группа воспламеняемости',
                          filters=['В3', 'В2', 'В1'], dict_to_rename=colums_2_rename, file_nam=rep_file, sheet_nam='Воспламеняемость')

#Специальная фильтрация с построением графика

selected_columns2 = ['2.7 Дата проведения эксперимента', 'Служебный идентификатор', 'Наименование материала', 'ЕКН',
                     '2.5 Наименование лаборатории', '2.9 Плотность теплового потока для эксперимента',
                     '2.11 Время воспламенения, с']
column_to_rename = {'Служебный идентификатор': '№ Заявки', 'Наименование материала': 'Материал',
                                   '2.5 Наименование лаборатории': 'Лаборатория', '2.9 Плотность теплового потока для эксперимента': 'Плотность теплового потока',
                                   '2.11 Время воспламенения, с': 'Время воспламенения'}
df_prefiltered =  SelectAndFilter(merged_df, selected_columns2, column_name='ЕКН', filters=[500464], date_column='2.7 Дата проведения эксперимента', start_date='01.01.2025', end_date='28.02.2025')
df_sel2 = SelectAndFilter(d_f=df_prefiltered, select_column=selected_columns2, file_nam=rep_file, sheet_nam='Саларьево', dict_to_rename=column_to_rename, drop_date='2.7 Дата проведения эксперимента')

df_lpi = SelectAndFilter(d_f=df_sel2, column_name='Лаборатория', filters=['ЛПИ', 'ЦЭИИС'])
df_firelab = SelectAndFilter(d_f=df_sel2, column_name='Лаборатория', filters=['ООО "Фаерлаб"', 'Биквест-Центр'])
df_firecentr = SelectAndFilter(d_f=df_sel2, column_name='Лаборатория', filters=['ООО "НПО "Пожцентр""', 'МГСУ'])



Picator(df_lpi, 'Плотность теплового потока', 'Время воспламенения', 'Плотность теплового потока, кВт/м^2',
        'Время воспламенения, с', 'Лаборатория', 'Зависимость времени воспламенения от плотности теплового потока для ЕКН 500464', rep_file,
        'Саларьево')
Picator(df_firelab, 'Плотность теплового потока', 'Время воспламенения', 'Плотность теплового потока, кВт/м^2',
        'Время воспламенения, с', 'Лаборатория', 'Зависимость времени воспламенения от плотности теплового потока для ЕКН 500464', rep_file,
        'Саларьево')
Picator(df_firecentr, 'Плотность теплового потока', 'Время воспламенения', 'Плотность теплового потока, кВт/м^2',
        'Время воспламенения, с', 'Лаборатория', 'Зависимость времени воспламенения от плотности теплового потока для ЕКН 500464', rep_file,
        'Саларьево')